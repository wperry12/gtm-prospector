# /services/gemini_ai.py
"""Client for the Google Gemini API.

Handles generation of AI strategy summaries and Go-To-Market (GTM) plans.
"""
import google.generativeai as genai
import json
from typing import List, Dict, Any, Optional
from .demo_data import DUMMY_CBA_AI_STRATEGY, DUMMY_CBA_GTM_STRATEGY, DUMMY_CBA_PRIORITIZED_PROSPECTS
from config import GEMINI_API_KEY

# Configure the Gemini API client once on module import.
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)


def summarize_ai_strategy(company_name: str, articles_text: str) -> str:
    """Generates a two-part sales briefing from article text.

    Args:
        company_name: The target company for the analysis.
        articles_text: Concatenated text from scraped news articles.

    Returns:
        A markdown string with a scorecard and detailed briefing,
        separated by '---'. Returns an error message on failure.
    """
    if not GEMINI_API_KEY: return "Gemini API Key not configured."
    if not articles_text: return f"No article content found for '{company_name}' to analyze."

    model = genai.GenerativeModel('gemini-2.5-pro')
    
    prompt = f"""
    You are an expert B2B sales intelligence analyst. Your mission is to create a sales briefing about '{company_name}' for a salesperson selling an AI-enabled customer support platform.
    
    Your response must contain two parts, separated by a single '---' divider. Do not include any headings like "Prospect Scorecard" or "Detailed Briefing".

    **Part 1: Prospect Scorecard Content**
    For each of the three categories below, provide a rating and its justification. Follow the exact formatting shown in the example.

    **FORMAT EXAMPLE:**
    1.  **Overall AI Adoption:** High 🔥 - Actively integrating AI in core processes
        * [Your justification text here]

    2.  **Customer Support AI Status:** Actively Integrated 🔒
        * [Your justification text here]

    3.  **Build vs. Buy Approach:** Open to External Partnerships 🤩
        * [Your justification text here]

    **CATEGORIES & OPTIONS:**
    - **Overall AI Adoption:** (Choose one: High 🔥 - Actively integrating AI in core processes | Medium ☀️ - Piloting AI in some areas | Low ❄️ - Only exploring or talking about AI)
    - **Customer Support AI Status:** (Choose one: Actively Integrated 🔒 | Exploring/Piloting 🧪 | Not Mentioned 🤔)
    - **Build vs. Buy Approach:** (Choose one: Strong Internal Build Focus ❌| Open to External Partnerships 🤩| Unclear 🤔)
    
    ---

    **Part 2: Detailed Briefing Content**
    Now, provide the detailed context that supports the scorecard, including the following markdown sections:
    ### Stated Challenges & Pain Points
    - Pay special attention to and **you MUST include** any mentioned difficulties, implementation setbacks, reversed decisions (like the reversal of job cuts), unexpected negative outcomes, or strategic pivots related to their AI rollouts. These details are the most critical for finding a sales opening.
    ### Opportunities for Customer Support AI
    - Based on their goals and challenges, suggest 1-2 specific ways our AI customer support technology could help them achieve their goals or overcome their pain points.
    ### Evidence & Key Initiatives
    - List the specific AI projects, goals, and technologies mentioned in the articles that support your analysis.
    --- ARTICLE TEXTS ---
    {articles_text}
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Error calling Gemini API for strategy summary: {e}")
        return "Error: Could not generate AI strategy summary."

def generate_gtm_strategy(company_name: str, ai_strategy_summary: str, employees: List[Dict]) -> Optional[Dict]:
    """Generates a structured GTM plan as a JSON object.

    Args:
        company_name: The target company.
        ai_strategy_summary: The briefing generated by summarize_ai_strategy.
        employees: A list of enriched employee contacts.

    Returns:
        A dict representing the GTM plan, or None on failure.
    """
    if not GEMINI_API_KEY: return None
    
    model = genai.GenerativeModel('gemini-2.5-pro')
    
    employee_prompt_str = "\n".join([f"- {e['name']} ({e['role']}), Connection Status: {e['connection_status']}, Connected Via: {e.get('connected_with') or 'N/A'}" for e in employees])
    
    lorikeet_description = """
    Lorikeet is an AI-native customer support platform that helps businesses automate up to 80% of their support queries. 
    Our key differentiators are:
    1.  **True Multimodal Support:** We handle voice, text, and video interactions seamlessly within a single AI agent.
    2.  **Proactive Engagement:** Our AI can proactively reach out to customers on our clients' websites to solve problems before they become support tickets.
    3.  **Deep Integration:** We offer deep, out-of-the-box integrations with Salesforce, Zendesk, and Shopify to pull customer data and provide hyper-personalized responses.
    """
    
    prompt = f"""
    You are an expert Go-To-Market strategist for Lorikeet. 
    **About Lorikeet:** {lorikeet_description}
    Your task is to create a detailed, actionable outreach plan to sell Lorikeet to '{company_name}'.
    **CONTEXT:**
    1.  **Target Company's AI Strategy & Pain Points:** "{ai_strategy_summary}"
    2.  **Key People at Target Company (with our connection status):**
        {employee_prompt_str}
    **YOUR TASK:**
    Generate a response in a single, valid JSON object with the keys "pain_point_mapping", "prioritized_prospects", "outreach_strategy", and "message_templates".
    1.  **"pain_point_mapping"**: An array of objects. For each key pain point identified in the target's AI strategy, create an object with two keys: "identified_pain" and "lorikeet_solution". The value for "lorikeet_solution" must explain specifically how one of Lorikeet's features solves that pain point.
    2.  **"prioritized_prospects"**: A JSON array of the employee objects provided. Re-order this list from highest to lowest priority for outreach. Priority should be based on a combination of their role's relevance to an AI-related sale (e.g., CTO, AI Strategist are high priority) and whether we have an existing connection (a connection significantly increases priority). Each object in the array must include the original keys: "name", "role", "company", "connection_status", and "connected_with".
    3.  **"outreach_strategy"**: A string containing a multi-step GTM outreach strategy. Explain the overall angle. It must include a plan for leveraging any existing connections and suggest concrete next steps after initial contact (e.g., "After emailing the CTO, follow up on LinkedIn referencing their recent project...").
    4.  **"message_templates"**: A JSON array of message template objects. Each object needs three keys: "target_role", "channel" (e.g., "Email", "LinkedIn Connection Request"), and "message". The message must be concise, reference a specific pain point from the analysis, and propose a clear call-to-action. Create at least two templates.
    """
    try:
        response = model.generate_content(prompt)
        # LLM responses may include markdown formatting; strip it before parsing.
        clean_json_str = response.text.strip().removeprefix('```json').removesuffix('```')
        return json.loads(clean_json_str)
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON from Gemini GTM response: {e}")
        return None
    except Exception as e:
        print(f"Error calling Gemini API for GTM strategy: {e}")
        return None

# --- Demo Functions ---

def summarize_ai_strategy_demo(company_name: str, articles_text: str) -> str:
    """Returns a static AI strategy summary for testing."""
    print(f"Using DUMMY AI Strategy for '{company_name}'...")
    return DUMMY_CBA_AI_STRATEGY

def generate_gtm_strategy_demo(company_name: str, summary: str, employees: List[Dict]) -> Dict:
    """Returns a static GTM strategy for testing."""
    print(f"Using DUMMY GTM Strategy for '{company_name}'...")
    dummy_gtm_data = DUMMY_CBA_GTM_STRATEGY.copy()
    dummy_gtm_data["prioritized_prospects"] = DUMMY_CBA_PRIORITIZED_PROSPECTS
    return dummy_gtm_data